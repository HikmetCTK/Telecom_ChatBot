import streamlit as st
import json
import os
import google.generativeai as genai
from google.generativeai.types import HarmCategory, HarmBlockThreshold
from dotenv import load_dotenv



load_dotenv()
api_key = os.getenv('GEMINI_API_KEY')


genai.configure(api_key=api_key)

generation_config = {
    "temperature": 0.1,
    "top_p": 0.95,
    "top_k": 64,
    "max_output_tokens": 8192,
    "response_mime_type": "application/json"
}

system_prompt="""
Sen yardÄ±msever bir telekom asistanÄ±sÄ±n. MÃ¼ÅŸterilere aÅŸaÄŸÄ±daki dÃ¶rt ana konudan birinde destek saÄŸlamaya odaklanÄ±yorsun:

1-Kalan Haklar: KullanÄ±cÄ±nÄ±n mevcut tarifesinde kalan internet, dakika ve SMS haklarÄ±nÄ± gÃ¶ster.
2-Yeni Tarife: KullanÄ±cÄ± yeni tarifeleri Ã¶ÄŸrenmek istiyorsa ona mevcut tarifeleri listele.
3-MÃ¼ÅŸteri Temsilcisi: KullanÄ±cÄ± mÃ¼ÅŸteri temsilcisiyle gÃ¶rÃ¼ÅŸmek istiyorsa Ã¶nce sebebini sor sonra yÃ¶nlendir.
4-Tarife FiyatÄ±: Mevcut tarifenin fiyatÄ±nÄ± sÃ¶yle.
5-Ã‡Ä±kÄ±ÅŸ:Sohbeti sonlandÄ±ran bir cÃ¼mle ile bitir
Sadece bu sorulara cevap ver
Yapmaman gerekenler:

AlakasÄ±z sohbetlere girme veya sorunun dÄ±ÅŸÄ±nda konulara odaklanma.
EÄŸer soru Ã¼stteki seÃ§eneklerle ilgisi yoksa 'Ben bir yapay zeka asistanÄ±yÄ±m konu dÄ±ÅŸÄ±ndaki sorulara cevap veremem' de
Destek saÄŸlamadÄ±ÄŸÄ±nÄ±z konulara yanÄ±t verme.

BunlarÄ± uygula:

Sadece yukarÄ±daki seÃ§eneklere odaklanarak kullanÄ±cÄ±larÄ±n sorularÄ±na yanÄ±t ver.
YardÄ±msever, pozitif bir dil kullan ve empati gÃ¶ster .
YanÄ±tlarÄ±nÄ±n sonunda cÃ¼mlenle ilgili pozitif bir emoji ekle.
EÄŸer kullanÄ±cÄ± mÃ¼ÅŸteri temsilcisine yÃ¶nlendirilmek istiyorsa Ã¶nce sebebini sor sonra  nazikÃ§e temsilciye yÃ¶nlendir.
Ã–rnek Senaryolar:

KullanÄ±cÄ±:"YardÄ±m edebileceÄŸim herhangi bir konu var mÄ±"
KullanÄ±cÄ±: "Kalan internet hakkÄ±mÄ± nasÄ±l Ã¶ÄŸrenebilirim?"
Asistan: "Mevcut internet hakkÄ±nÄ±z 5 GB ğŸ˜Š."

KullanÄ±cÄ±:"YardÄ±m edebileceÄŸim herhangi bir konu var mÄ±"
KullanÄ±cÄ±: "Telefonum Ã§ekmiyor"
Asistan: "Dilerseniz sizi mÃ¼ÅŸteri temsilcimizle gÃ¶rÃ¼ÅŸmenizi isterim.! ğŸ˜Š"

KullanÄ±cÄ±:"YardÄ±m edebileceÄŸim herhangi bir konu var mÄ±"
KullanÄ±cÄ±: "MÃ¼ÅŸteri temsilcisiyle gÃ¶rÃ¼ÅŸmek istiyorum."
Asistan: "Tabii, sizi mÃ¼ÅŸteri temsilcisine yÃ¶nlendirmeden Ã¶nce yapmak istediÄŸiniz iÅŸlemi kÄ±saca yazar mÄ±sÄ±nÄ±z? ğŸ˜Š."

KullanÄ±cÄ±:"YardÄ±m edebileceÄŸim herhangi bir konu var mÄ±"
KullanÄ±cÄ±: "Bana bu tarife yetmiyor"
Asistan: "Hemen  size  uygun tarifeleri getiriyorum! ğŸ˜Š"

Ã‡Ä±ktÄ± formatÄ±:
JSON ÅŸemasÄ± kullan:
json
{"eylem":str,
  "olay":str,
  "olasÄ±lÄ±k":float
}

* "DUR":EÄŸer kullanÄ±cÄ±nÄ±n isteÄŸini anladÄ±ysan,
KarÅŸÄ±lÄ±k gelen seÃ§enek numarasÄ±na (1-5) sahip olayÄ± dÃ¶ndÃ¼r.
{"eylem":"DUR",
  "olay":1 //Kalan haklarÄ±nÄ± gÃ¶stermek,
  "olasÄ±lÄ±k":0.74
} // 

"Devam Et":EÄŸer  cevap vermek iÃ§in daha fazla bilgiye ihtiyacÄ±n varsa bu eylemi dÃ¶ndÃ¼r,
{"eylem":"CONTINUE",
  "olay":"Yeni tarife fiyatlarÄ±nÄ± gÃ¶rmek ister misiniz ?"
  "olasÄ±lÄ±k":0.85
}

* Sohbeti bu ÅŸeklde baÅŸlat:
{"eylem":"Devam Et"
"olay":"YardÄ±m edebileceÄŸim herhangi bir konu var mÄ±"
"olasÄ±lÄ±k":1
}
"""


model = genai.GenerativeModel(
    model_name="gemini-1.5-flash-latest",
    generation_config=generation_config,
    safety_settings=[
        {"category": HarmCategory.HARM_CATEGORY_HATE_SPEECH, "threshold": HarmBlockThreshold.BLOCK_NONE},
        {"category": HarmCategory.HARM_CATEGORY_HARASSMENT, "threshold": HarmBlockThreshold.BLOCK_NONE},
        {"category": HarmCategory.HARM_CATEGORY_SEXUALLY_EXPLICIT, "threshold": HarmBlockThreshold.BLOCK_NONE},
        {"category": HarmCategory.HARM_CATEGORY_DANGEROUS_CONTENT, "threshold": HarmBlockThreshold.BLOCK_NONE},
    ],
    system_instruction=system_prompt
)
chat = model.start_chat(history=[])

class Customer:
    def __init__(self):
        self.kalan_haklari = "500 dk 10 gb 225 sms hakkÄ±nÄ±z kalmÄ±ÅŸtÄ±r"
        self.tarife_fiyati = "Tarifeniz 250tl dir"
        self.musteri_temsilcisi = "mÃ¼ÅŸteri temsilci numarasÄ±=333 333 33 33"
        self.en_uygun_tarife = "1000 dk 20 gb 500 sms sadece 500tldir"

    def kalan_haklarini_goster(self):
        return f"Kalan haklarÄ±nÄ±z: {self.kalan_haklari}"

    def yeni_tarife_bilgisi(self):
        return f"En uygun tarife aranÄ±yor....\n{self.en_uygun_tarife} Bu tarifeye geÃ§mek istermisniz?"

    def musteri_temsilcisine_yonlendir(self):
        return f"MÃ¼ÅŸteri temsilcimizle gÃ¶rÃ¼ÅŸmek iÃ§in {self.musteri_temsilcisi} numaralÄ± telefonu arayabilirsiniz. ğŸ˜Š"

    def tarife_fiyati_bilgisi(self):
        return f"Tarifenizin fiyatÄ±: {self.tarife_fiyati}"

def chatbot_response(message, customer):
    response_text = ""
    response = chat.send_message(message)
    decision = json.loads(response.text)

    if decision["eylem"] == "Devam Et" or decision["olasÄ±lÄ±k"] < 0.7:
        response_text = decision["olay"]
    else:
        choice = (decision["olay"])
        if choice == 1:
            response_text = customer.kalan_haklarini_goster()
        elif choice == 2:
            response_text = customer.yeni_tarife_bilgisi()
        elif choice == 3:
            response_text = customer.musteri_temsilcisine_yonlendir()
        elif choice == 4:
            response_text = customer.tarife_fiyati_bilgisi()
        elif choice == 5:
            response_text = "GÃ¶rÃ¼ÅŸmek Ãœzere!"
        else:
            response_text = "Ben bir yapay zeka asistanÄ±yÄ±m konu dÄ±ÅŸÄ±ndaki sorulara cevap verememğŸ˜Š."
        

    return response_text

#interface


st.title("TELEBOT")

if "history" not in st.session_state:
    st.session_state.history = []

customer = Customer()


user_input = st.text_input("Sormak istediÄŸiniz bir ÅŸeyi buraya yazÄ±n:")

if st.button("GÃ¶nder") and user_input:
    response = chatbot_response(user_input, customer)
    st.session_state.history.append(("KullanÄ±cÄ±:", user_input))
    st.session_state.history.append(("Asistan:", response))

for sender, message in st.session_state.history:
    st.write(f"**{sender}** {message}")
